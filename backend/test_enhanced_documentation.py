"""
Test script for enhanced documentation system
Verifies that all components integrate correctly
"""

import asyncio
import logging
from typing import Dict, List, Any

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def test_code_intelligence_creation():
    """Test code intelligence graph creation"""
    try:
        from app.services.code_intelligence import CodeIntelligenceGraph, CodeEntityData, BusinessRuleContext
        
        # Create test graph
        graph = CodeIntelligenceGraph()
        
        # Add test entity
        test_entity = CodeEntityData(
            id="test_entity_1",
            name="TestClass",
            type="class",
            file_path="/test/TestClass.java",
            line_number=10,
            docstring="Test class for validation"
        )
        
        graph.add_entity(test_entity)
        
        # Add test business rule
        test_rule = BusinessRuleContext(
            rule_id="BR-001",
            description="Test business rule",
            plain_english="This is a test rule for validation",
            confidence_score=0.9,
            category="Validation",
            code_entity_id="test_entity_1",
            module_path="test.module"
        )
        
        graph.add_business_rule(test_rule)
        
        # Verify creation
        stats = graph.get_statistics()
        logger.info(f"‚úÖ Code Intelligence Graph created successfully: {stats}")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Code Intelligence Graph creation failed: {e}")
        return False

def test_enhanced_ai_service_creation():
    """Test enhanced AI service creation"""
    try:
        from app.services.enhanced_ai_service import EnhancedAIService
        from app.services.ai_service import ai_service_instance
        from app.services.code_intelligence import code_intelligence
        
        # Create enhanced AI service
        enhanced_ai = EnhancedAIService(ai_service_instance, code_intelligence)
        
        logger.info("‚úÖ Enhanced AI Service created successfully")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Enhanced AI Service creation failed: {e}")
        return False

def test_hierarchical_documentation_builder():
    """Test hierarchical documentation builder"""
    try:
        from app.services.hierarchical_documentation_builder import HierarchicalDocumentationBuilder
        from app.services.code_intelligence import code_intelligence
        
        # Create builder
        doc_builder = HierarchicalDocumentationBuilder(code_intelligence)
        
        logger.info("‚úÖ Hierarchical Documentation Builder created successfully")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Hierarchical Documentation Builder creation failed: {e}")
        return False

def test_enhanced_diagram_service():
    """Test enhanced diagram service"""
    try:
        from app.services.enhanced_diagram_service import EnhancedDiagramService
        from app.services.ai_service import ai_service_instance
        from app.services.code_intelligence import code_intelligence
        
        # Create diagram service
        diagram_service = EnhancedDiagramService(ai_service_instance, code_intelligence)
        
        logger.info("‚úÖ Enhanced Diagram Service created successfully")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Enhanced Diagram Service creation failed: {e}")
        return False

def test_enhanced_migration_dashboard():
    """Test enhanced migration dashboard"""
    try:
        from app.services.enhanced_migration_dashboard import EnhancedMigrationDashboard
        from app.services.ai_service import ai_service_instance
        from app.services.code_intelligence import code_intelligence
        
        # Create migration dashboard
        migration_dashboard = EnhancedMigrationDashboard(ai_service_instance, code_intelligence)
        
        logger.info("‚úÖ Enhanced Migration Dashboard created successfully")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Enhanced Migration Dashboard creation failed: {e}")
        return False

def test_enhanced_documentation_integration():
    """Test enhanced documentation integration"""
    try:
        from app.services.enhanced_documentation_integration import EnhancedDocumentationIntegration
        
        # Create integration service
        integration_service = EnhancedDocumentationIntegration()
        
        logger.info("‚úÖ Enhanced Documentation Integration created successfully")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Enhanced Documentation Integration creation failed: {e}")
        return False

async def test_simple_enhanced_generation():
    """Test simple enhanced documentation generation"""
    try:
        from app.services.enhanced_documentation_integration import get_enhanced_documentation_integration
        from app.models.schemas import DocumentationRequest, DocumentationDepth
        
        # Create test entities
        test_entities = [
            {
                "name": "TestService",
                "type": "class", 
                "file_path": "/test/TestService.java",
                "line_number": 20,
                "dependencies": ["DatabaseService", "ValidationService"],
                "complexity": 5
            },
            {
                "name": "validateInput",
                "type": "method",
                "file_path": "/test/TestService.java", 
                "line_number": 45,
                "dependencies": [],
                "complexity": 3
            }
        ]
        
        # Create test request
        test_request = DocumentationRequest(
            repository_path="/test",
            depth=DocumentationDepth.STANDARD,
            include_diagrams=False,
            include_business_rules=True
        )
        
        # Get integration service
        integration_service = get_enhanced_documentation_integration()
        
        logger.info("‚úÖ Enhanced documentation generation test setup successful")
        logger.info("‚ÑπÔ∏è  Note: Full generation test would require actual AI service integration")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Enhanced documentation generation test failed: {e}")
        return False

def run_all_tests():
    """Run all tests"""
    logger.info("üöÄ Starting Enhanced Documentation System Tests")
    logger.info("=" * 60)
    
    tests = [
        ("Code Intelligence Graph", test_code_intelligence_creation),
        ("Enhanced AI Service", test_enhanced_ai_service_creation),
        ("Hierarchical Documentation Builder", test_hierarchical_documentation_builder),
        ("Enhanced Diagram Service", test_enhanced_diagram_service),
        ("Enhanced Migration Dashboard", test_enhanced_migration_dashboard),
        ("Enhanced Documentation Integration", test_enhanced_documentation_integration),
    ]
    
    async_tests = [
        ("Simple Enhanced Generation", test_simple_enhanced_generation),
    ]
    
    results = []
    
    # Run synchronous tests
    for test_name, test_func in tests:
        logger.info(f"üß™ Testing {test_name}...")
        result = test_func()
        results.append((test_name, result))
    
    # Run asynchronous tests
    async def run_async_tests():
        async_results = []
        for test_name, test_func in async_tests:
            logger.info(f"üß™ Testing {test_name}...")
            result = await test_func()
            async_results.append((test_name, result))
        return async_results
    
    # Run async tests
    try:
        async_results = asyncio.run(run_async_tests())
        results.extend(async_results)
    except Exception as e:
        logger.error(f"Error running async tests: {e}")
        results.extend([(name, False) for name, _ in async_tests])
    
    # Report results
    logger.info("=" * 60)
    logger.info("üìä Test Results Summary")
    logger.info("=" * 60)
    
    passed = 0
    failed = 0
    
    for test_name, result in results:
        status = "‚úÖ PASSED" if result else "‚ùå FAILED"
        logger.info(f"{test_name}: {status}")
        if result:
            passed += 1
        else:
            failed += 1
    
    logger.info("=" * 60)
    logger.info(f"üìà Total: {len(results)} tests, {passed} passed, {failed} failed")
    
    if failed == 0:
        logger.info("üéâ All tests passed! Enhanced documentation system is ready.")
    else:
        logger.warning(f"‚ö†Ô∏è  {failed} tests failed. Check the errors above.")
    
    return failed == 0

if __name__ == "__main__":
    # Run tests
    success = run_all_tests()
    
    if success:
        print("\\nüéØ Enhanced Documentation System Test Summary:")
        print("‚úÖ All core components initialized successfully")
        print("‚úÖ Code intelligence graph creation works")
        print("‚úÖ Enhanced AI service integration ready")
        print("‚úÖ Hierarchical documentation builder ready") 
        print("‚úÖ Enhanced diagram generation ready")
        print("‚úÖ Migration dashboard ready")
        print("‚úÖ Full integration service ready")
        print("\\nüöÄ System is ready for enhanced documentation generation!")
        print("\\nTo use: Set documentation_depth to 'exhaustive' to activate enhanced features")
    else:
        print("\\n‚ùå Some tests failed. Check the logs above for details.")